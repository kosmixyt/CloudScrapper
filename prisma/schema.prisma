// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String          @id @default(cuid())
    name           String?
    email          String?         @unique
    emailVerified  DateTime?
    image          String?
    sessions       Session[]
    ChromeSessions ChromeSession[]
    AllowedOrigins AllowedOrigin[]
    accounts       Account[]
    Request        Request[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String? @db.Text
    scope             String? @db.Text
    id_token          String? @db.Text
    session_state     String? @db.Text
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model ChromeSession {
    id            String @id @default(cuid())
    proxyHost     String
    proxyUsername String
    proxyPassword String
    proxyPort     Int
    User          User   @relation(fields: [userId], references: [id])
    userId        String
}

model AllowedOrigin {
    id       String    @id @default(cuid())
    origin   String    @unique
    User     User      @relation(fields: [userId], references: [id])
    userId   String
    requests Request[]
}

model Request {
    id              String         @id @default(cuid())
    url             String
    method          String
    AllowedOrigin   AllowedOrigin? @relation(fields: [allowedOriginId], references: [id])
    allowedOriginId String?
    User            User           @relation(fields: [userId], references: [id])
    userId          String
}
